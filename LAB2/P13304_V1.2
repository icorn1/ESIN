#ifndef _PILA_HPP
#define _PILA_HPP
#include <cstddef>
using namespace std;

class pila {
  public: 
     pila();	          // constructor
     
     // tres grans
     pila(const pila& p); // constructor per còpia
     ~pila();             // destructor
     pila& operator=(const pila& p); // operador assignació
    
     void apilar(int x);
     void desapilar();
     int cim() const;
     bool es_buida() const;
    
  private:
     struct node { // definició de tipus privat
        node* seg; // punter al següent 'node'
        int info;
     };
     
     node* _cim; // la pila consisteix en un punter al node del cim
                 
     // mètode privat de classe per alliberar memòria; allibera la cadena de 
     // nodes que s'inicia en el node \emph{n}. 
     static void esborra_pila(node* n);
     
     // mètode privat de classe per realitzar còpies; còpia tota la cadena de nodes 
     // a partir del node apuntat per \emph{origen} i retorna un punter al node inicial de 
     // la còpia; la paraula reservada const indica que no es pot modificar el valor
     // apuntat pel punter \emph{origen}.
     static node* copia_pila(const node* origen);
};
#endif
#include <iostream>

// -------------------------
// MÈTODES PRIVATS DE CLASSE
// -------------------------

void pila::esborra_pila(node* n) {
   if (n != NULL) {
      esborra_pila(n->seg); // p-$>$seg equival a (*p).seg 
      delete n; // allibera la memòria de l'objecte apuntat per \emph{n}.
   }
}

// és necessari posar ¿pila::node¿ com tipus del resultat per què ¿node¿ 
// està definit de la classe pila
pila::node* pila::copia_pila(const node* origen) {
   node* desti = NULL;
   if (origen != NULL) {
      desti = new node;
      desti->info = origen->info;
      
      // copia la resta de la cadena
      desti->seg = copia_pila(origen->seg);  
   }
   return desti; 
}

// -------------------------
// MÈTODES PÚBLICS
// -------------------------
pila::pila() : _cim(NULL) { }

// genera una còpia de la pila apuntada per 'p.\_cim'
pila::pila(const pila& p) {
   _cim = copia_pila(p._cim);
}

// allibera la memòria de la pila apuntada per '\_cim'
pila::~pila() {
   esborra_pila(_cim);
}

pila& pila::operator=(const pila& p) {
   if (this != &p) {
      node* aux = copia_pila(p._cim); 
      esborra_pila(_cim);
      _cim = aux;
   }
   return *this; // retorna una referència a la pila que invoca el mètode.
}

void pila::apilar(int x) {
   node* n = new node;
   n->info = x;
   n->seg = _cim; // connecta el nou node amb el primer node de la pila i
                  // fa que aquest sigui el cim
   _cim = n;
}

void pila::desapilar() {
   node* n = _cim;
   if (_cim != NULL) {
      _cim = _cim->seg;
      delete n;
   } else 
      cout << "Error: Pila Buida\n";
   // faltaria tractar l'error de pila buida
}

int pila::cim() const {
   if (_cim != NULL) {
      return _cim->info;
   }
   else {
      cout << "Error: Pila Buida\n";
      return 0;
   }
   // faltaria tractar l'error de pila buida
}

bool pila::es_buida() const {
   return _cim == NULL;
}
#include <iostream>
#include <sstream>

void invertir(pila &A){
    pila aux;
    for (pila dump = A; !A.es_buida(); A.desapilar()){
        aux.apilar(A.cim());
    }
    A = aux;
}

void inv_separada(pila A, pila &parell, pila &senar)
//Pre: Parell i senar son piles buides.
//Post: Modifica el contingut de parell i senar en funcio del contingut de parells i senars d'A
{
    while(!A.es_buida()){

        if(A.cim()%2 == 0){

            parell.apilar(A.cim());
            A.desapilar();

        }
        else{

            senar.apilar(A.cim());
            A.desapilar();

        }
    }
    invertir(parell);
    invertir(senar);


}

int main(){

    pila A;
    string s;
    int elem;
    while(getline(cin, s)){

        while(!A.es_buida())
            A.desapilar();

        istringstream ss (s);

        while(ss >> elem)
            A.apilar(elem);
        
        pila parell;
        pila senar;

        inv_separada(A, parell, senar);

        while(!parell.es_buida()){
            cout << parell.cim();
            parell.desapilar();
            if (!parell.es_buida())
                cout << " ";
            else if (!senar.es_buida())
                cout << " ";
        } 
        
        while(!senar.es_buida()){
            
            cout << senar.cim();
            senar.desapilar();
            if(!senar.es_buida()) 
                cout << " ";
        } cout << "\n";


    

    }


    


}