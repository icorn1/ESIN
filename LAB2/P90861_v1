#ifndef _CUA_HPP
#define _CUA_HPP
#include <cstddef>
using namespace std;

template <typename T>
class cua {
private: 
  struct node {
    T info;
    node* seg;
  }; 
  node* _cua;

  node* copiar(node* n, node* fi, node* ini);

public:
  // Construeix una cua buida.
  cua();

  // Tres grans: constructora per còpia, operador d'assignació i destructora.
  cua(const cua<T> &c);
  cua<T>& operator=(const cua<T> &c);
  ~cua() throw();

  // Afegeix un element al final de la cua. 
  void encuar(const T &x);

  // Treu el primer element de la cua. Llança un error si la cua és buida.
  void desencuar();

  // Obté el primer element de la cua. Llança un error si la cua és buida.
  const T& primer() const;

  // Consulta si la cua és buida o no.
  bool es_buida() const throw();

  static const int CuaBuida = 310;
};

#endif
template <typename T>
cua<T>::cua() : _cua(NULL) {   
}

template <typename T>
cua<T>::cua(const cua<T> &c) : _cua(NULL) {
  if (c._cua != NULL) {
    _cua = new node;
    try {
      _cua->info = c._cua->info;
      _cua->seg = copiar(c._cua->seg, c._cua, _cua);
    }
    catch (...) {
      delete(_cua);
      throw;
    }
  }
}

template <typename T>
typename cua<T>::node* cua<T>::copiar(node* n, node* fi, node* ini) {
  node* aux;
  if (n != fi) {
    aux = new node;
    try {
      aux->info = n->info;
      aux->seg = copiar(n->seg, fi, ini); 
    }
    catch (...) {
      delete aux;
      throw;
    }
  }
  else {
    aux = ini;
  }
  return aux;
}

template <typename T>
cua<T>& cua<T>::operator=(const cua<T> &c) {
  if (this != &c) {
    cua<T> caux(c);
    node* naux = _cua;
    _cua = caux._cua;
    caux._cua = naux;
  }
  return *this;
}

template <typename T>
cua<T>::~cua() throw() {
  if (_cua != NULL) {
    node* fi = _cua;
    _cua = _cua->seg;
    while (_cua != fi) {
      node* aux = _cua;
      _cua = _cua->seg;
      delete aux;
    }
    delete(_cua);
  }
}

template <typename T>
void cua<T>::encuar(const T &x) {
  node* p = new(node); 
  try {
    p->info = x;
  }
  catch (...) {
    delete p;
    throw;
  }
  if (_cua == NULL) {
    p->seg = p;  // cua amb un únic element que s’apunta 
  }              // a sí mateix
  else {
    p->seg = _cua->seg;
    _cua->seg = p;
  }
  _cua = p;
}

template <typename T>
void cua<T>::desencuar() { 
  if (_cua==NULL) {
    throw CuaBuida;
  }
  node* p = _cua->seg;
  if (p == _cua) {
    _cua = NULL; // desencuem una cua que tenia un únic 
  }              // element
  else {  
    _cua->seg = p->seg;
  }
  delete(p);
}

template <typename T>
const T& cua<T>::primer() const { 
  if (_cua==NULL) { 
    throw CuaBuida;
  }
  return (_cua->seg->info);
}

template <typename T>
bool cua<T>::es_buida() const throw() {  
  return (_cua==NULL);
}
#include <iostream>
#include <sstream>
#include <vector>
using namespace std;

vector <cua <string>>  llegir_cues (const int &num_cues){
	
    string s; 
    vector <cua <string>> cues(num_cues);
    getline(cin, s);

    for (int i = 0; i < num_cues; i++){

        getline(cin, s);
		istringstream ss(s);
		string nom;
        
        while(ss >> nom){

            cues[i].encuar(nom);
            
        } 

    }
    return cues;
}

void missatge_final(cua <string> sortides, vector <cua <string>> cues){

	cout << "SORTIDES" << endl << "--------" << endl;
    	
    	while(!sortides.es_buida()){
            cout << sortides.primer() << endl;
            sortides.desencuar();
        } cout << endl;
    	
    	cout << "CONTINGUTS FINALS" << endl << "-----------------" << endl;
    	
	int n2 = cues.size();
    	for (int i = 0; i < n2; ++i) {
    		cout << "cua " << i+1 << ":";
    		if (!cues[i].es_buida()){
    			cout << " ";

                while (!cues[i].es_buida()){
                    cout << cues[i].primer();
                    cues[i].desencuar();
                    if (!cues[i].es_buida())
                        cout << " ";
                    
                }
    			
        	}
        	cout << endl;
    	}



}
int main(){
	int num_cues;
	cin >> num_cues;
	string s;
	vector <cua <string> > cues = llegir_cues(num_cues);
	cua <string> sortides;
	
	while(getline(cin, s)){

		istringstream ss(s);
		string ordre; 
		ss >> ordre;

		if (ordre == "SURT"){
			int nc;
			ss >> nc;
			if (nc > 0 and nc <= num_cues){
				if((!cues[nc-1].es_buida())){
					sortides.encuar(cues[nc-1].primer());
					cues[nc-1].desencuar();
				}
			}
		}
		
		else if (ordre == "ENTRA"){
			string nom;
			int nc;
			ss >> nom;
			ss >> nc;

			if (nc > 0 and nc <= num_cues){

				cues[nc-1].encuar(nom);
			}
			
		}
	}
	
	missatge_final(sortides, cues);

}